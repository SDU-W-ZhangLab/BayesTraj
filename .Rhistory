AT2_genes %in% gene_names
# Subset gene expression matrix
gene_expression_matrix <- t(data_counts[, c(AT1_genes, AT2_genes)])
library(pheatmap)
library(RColorBrewer)
# Load cell labels
cell_labels <- read.csv('data/bifurcation/cell_labels.csv', header = F)$V1
desired_order <- c('cell_type_1', 'cell_type_2', 'cell_type_3')
annotation <- data.frame(Label = factor(cell_labels, levels = desired_order))
rownames(annotation) <- colnames(t(data_counts))
# Sort cells by label
sorted_order <- order(annotation$Label)
gene_expression_matrix <- gene_expression_matrix[, sorted_order]
annotation <- annotation[sorted_order, , drop = FALSE]
# Define color palette
bluecolors <- brewer.pal(9, "Blues")
redcolors <- brewer.pal(9, "Reds")
color_palette <- c(
colorRampPalette(colors = c(bluecolors[9], bluecolors[7]))(20),
colorRampPalette(colors = c(bluecolors[7], bluecolors[5]))(20),
colorRampPalette(colors = c(bluecolors[5], "white"))(10),
colorRampPalette(colors = c("white", redcolors[5]))(10),
colorRampPalette(colors = c(redcolors[5], redcolors[6]))(20),
colorRampPalette(colors = c(redcolors[6], redcolors[7]))(20)
)
# Annotation colors
unique_labels <- levels(annotation$Label)
colors <- c('blue', '#FFFF00', 'green')
names(colors) <- unique_labels
ann_colors <- list(Label = colors)
# Plot heatmap
pheatmap(
gene_expression_matrix,
annotation_col = annotation,
annotation_colors = ann_colors,
color = color_palette,
scale = "row",
cluster_rows = TRUE,
cluster_cols = F,
show_rownames = T,
show_colnames = F
)
# Preprocess data for BayesTraj
sub_data_counts <- normalized_expression_data(data_counts)
# 卸载当前包
remove.packages("BayesTraj")
# 清理本地库中可能遗留的文件
unlink("C:/Users/ling/AppData/Local/R/win-library/4.4/BayesTraj", recursive = TRUE)
# 重新安装包（替换为你的安装方式）
devtools::install_local("C:/Users/ling/Desktop/BayesTraj.zip")
# 卸载当前包
remove.packages("BayesTraj")
# 清理本地库中可能遗留的文件
unlink("C:/Users/ling/AppData/Local/R/win-library/4.4/BayesTraj", recursive = TRUE)
# 重新安装包（替换为你的安装方式）
devtools::install_local("C:/Users/ling/Desktop/BayesTraj.zip")
# 清除当前环境变量
rm(list = ls())
# 重启 R 会话（适用于 RStudio）
.rs.restartR()
# 卸载当前包
remove.packages("BayesTraj")
# 清理本地库中可能遗留的文件
unlink("C:/Users/ling/AppData/Local/R/win-library/4.4/BayesTraj", recursive = TRUE)
# 重新安装包（替换为你的安装方式）
devtools::install_local("C:/Users/ling/Desktop/BayesTraj.zip")
library(BayesTraj)
library(pheatmap)
library(ggplot2)
library(RColorBrewer)
theme_set(theme_bw())
set.seed(1L)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE, warning = FALSE,
fig.center = TRUE, fig.width = 6, fig.height = 4)
library(BayesTraj)
# Load data
data <- read.csv('data/bifurcation/lung_exp.csv', header = T, row.names = 1)
gene_names <- rownames(data)
# Transform data
data_counts <- t(log1p(data))
# Define gene sets for analysis
AT1_genes <- c('Clic5', 'Pdpn', 'Cav1', 'Ager', 'Hopx', 'Vegfa')
AT2_genes <- c('Sftpa1', 'Lyz2', 'Sftpb', 'Sftpc', 'Slc34a2')
# Check if genes exist in the dataset
AT1_genes %in% gene_names
AT2_genes %in% gene_names
# Subset gene expression matrix
gene_expression_matrix <- t(data_counts[, c(AT1_genes, AT2_genes)])
library(pheatmap)
library(RColorBrewer)
# Load cell labels
cell_labels <- read.csv('data/bifurcation/cell_labels.csv', header = F)$V1
desired_order <- c('cell_type_1', 'cell_type_2', 'cell_type_3')
annotation <- data.frame(Label = factor(cell_labels, levels = desired_order))
rownames(annotation) <- colnames(t(data_counts))
# Sort cells by label
sorted_order <- order(annotation$Label)
gene_expression_matrix <- gene_expression_matrix[, sorted_order]
annotation <- annotation[sorted_order, , drop = FALSE]
# Define color palette
bluecolors <- brewer.pal(9, "Blues")
redcolors <- brewer.pal(9, "Reds")
color_palette <- c(
colorRampPalette(colors = c(bluecolors[9], bluecolors[7]))(20),
colorRampPalette(colors = c(bluecolors[7], bluecolors[5]))(20),
colorRampPalette(colors = c(bluecolors[5], "white"))(10),
colorRampPalette(colors = c("white", redcolors[5]))(10),
colorRampPalette(colors = c(redcolors[5], redcolors[6]))(20),
colorRampPalette(colors = c(redcolors[6], redcolors[7]))(20)
)
# Annotation colors
unique_labels <- levels(annotation$Label)
colors <- c('blue', '#FFFF00', 'green')
names(colors) <- unique_labels
ann_colors <- list(Label = colors)
# Plot heatmap
pheatmap(
gene_expression_matrix,
annotation_col = annotation,
annotation_colors = ann_colors,
color = color_palette,
scale = "row",
cluster_rows = TRUE,
cluster_cols = F,
show_rownames = T,
show_colnames = F
)
library(BayesTraj)
# Load data
data <- read.csv('data/bifurcation/lung_exp.csv', header = T, row.names = 1)
gene_names <- rownames(data)
# Transform data
data_counts <- t(log1p(data))
# Define gene sets for analysis
AT1_genes <- c('Clic5', 'Pdpn', 'Cav1', 'Ager', 'Hopx', 'Vegfa')
AT2_genes <- c('Sftpa1', 'Lyz2', 'Sftpb', 'Sftpc', 'Slc34a2')
# Check if genes exist in the dataset
AT1_genes %in% gene_names
AT2_genes %in% gene_names
# Subset gene expression matrix
gene_expression_matrix <- t(data_counts[, c(AT1_genes, AT2_genes)])
library(pheatmap)
library(RColorBrewer)
# Load cell labels
cell_labels <- read.csv('data/bifurcation/cell_labels.csv', header = F)$V1
desired_order <- c('cell_type_1', 'cell_type_2', 'cell_type_3')
annotation <- data.frame(Label = factor(cell_labels, levels = desired_order))
rownames(annotation) <- colnames(t(data_counts))
# Sort cells by label
sorted_order <- order(annotation$Label)
gene_expression_matrix <- gene_expression_matrix[, sorted_order]
annotation <- annotation[sorted_order, , drop = FALSE]
# Define color palette
bluecolors <- brewer.pal(9, "Blues")
redcolors <- brewer.pal(9, "Reds")
color_palette <- c(
colorRampPalette(colors = c(bluecolors[9], bluecolors[7]))(20),
colorRampPalette(colors = c(bluecolors[7], bluecolors[5]))(20),
colorRampPalette(colors = c(bluecolors[5], "white"))(10),
colorRampPalette(colors = c("white", redcolors[5]))(10),
colorRampPalette(colors = c(redcolors[5], redcolors[6]))(20),
colorRampPalette(colors = c(redcolors[6], redcolors[7]))(20)
)
# Annotation colors
unique_labels <- levels(annotation$Label)
colors <- c('blue', '#FFFF00', 'green')
names(colors) <- unique_labels
ann_colors <- list(Label = colors)
# Plot heatmap
pheatmap(
gene_expression_matrix,
annotation_col = annotation,
annotation_colors = ann_colors,
color = color_palette,
scale = "row",
cluster_rows = TRUE,
cluster_cols = F,
show_rownames = T,
show_colnames = F
)
# Preprocess data for BayesTraj
sub_data_counts <- normalized_expression_data(data_counts)
sub_data_counts <- sub_data_counts[, c(AT1_genes, AT2_genes)]
Y1 <- sub_data_counts[, c(AT1_genes), drop = F]
Y2 <- sub_data_counts[, c(AT2_genes), drop = F]
# Estimate priors
quantile_AT1 <- apply(Y1, 2, function(x) quantile(x, probs = c(0.25, 0.5, 0.75)))
quantile_AT2 <- apply(Y2, 2, function(x) quantile(x, probs = c(0.25, 0.5, 0.75)))
transient_mu <- apply(rbind(quantile_AT1[2, ], quantile_AT2[2, ]), 2, function(x) sort(x, decreasing = TRUE)[2])
switch_mu <- apply(rbind(quantile_AT1[3, ], quantile_AT2[3, ]), 2, function(x) sort(x, decreasing = TRUE)[1])
b1_mu0_s_mu <- switch_mu[AT1_genes] / 2
b1_mu0_s_sd <- rep(0.05, length(AT1_genes))
b2_mu0_s_mu <- switch_mu[AT2_genes] / 2
b2_mu0_s_sd <- rep(0.05, length(AT2_genes))
# Run BayesTraj
bt <- BayesTraj(
iter = 100, n_branch = 2, Y1 = Y1, Y2 = Y2,
alpha = 0.1, eplison = 0.04,
lower_k_s = 10, lower_k_t = 4, lower_t0 = 0.3, upper_b1_t0 = 0.8, lower_b2_t0 = 0.3,
lower_mu0_s = 0.2, upper_mu0_s = 0.5, lower_mu0_t = 0.05, upper_mu0_t = 0.4,
b1_mu0_s_mu = b1_mu0_s_mu, b1_mu0_s_sd = b1_mu0_s_sd,
b2_mu0_s_mu = b2_mu0_s_mu, b2_mu0_s_sd = b2_mu0_s_sd,
chains = 1
)
bt <- infer_pseudotime(bt)
# Preprocess data for BayesTraj
sub_data_counts <- normalized_expression_data(data_counts)
sub_data_counts <- sub_data_counts[, c(AT1_genes, AT2_genes)]
Y1 <- sub_data_counts[, c(AT1_genes), drop = F]
Y2 <- sub_data_counts[, c(AT2_genes), drop = F]
AT1_df <- sub_data_counts[cell_labels %in% c('cell_type_2'),]
AT2_df <- sub_data_counts[cell_labels %in% c('cell_type_3'),]
par(mfrow = c(2,1))
boxplot(AT1_df)
boxplot(AT2_df)
quantile_AT1 <- apply(AT1_df,2,function(x){
quantile(x,probs = c(0.25,0.5,0.75))
})
quantile_AT2 <- apply(AT2_df,2,function(x){
quantile(x,probs = c(0.25,0.5,0.75))
})
quantile_all <- rbind(quantile_AT1[2,],quantile_AT2[2,])
quantile_all <- quantile_all[,unique(c(AT1_genes,AT2_genes))]
transient_mu <- apply(quantile_all, 2, function(x){
sort(x, decreasing = TRUE)[2]
})
quantile_all <- rbind(quantile_AT1[3,],quantile_AT2[3,])
quantile_all <- quantile_all[,unique(c(AT1_genes,AT2_genes))]
switch_mu <- apply(quantile_all, 2, function(x){
sort(x, decreasing = TRUE)[1]
})
b1_mu0_s_mu = switch_mu[AT1_genes]/2
b1_mu0_s_sd = rep(0.05,length(AT1_genes))
b2_mu0_s_mu = switch_mu[c(AT2_genes)]/2
b2_mu0_s_sd = rep(0.05,length(c(AT2_genes)))
num_genes <- length(unique(c(AT1_genes,AT2_genes)))
b1_mu0_t_mu <- transient_mu[!(names(transient_mu) %in% AT1_genes)]/4
b1_mu0_t_sd <- rep(0.02,num_genes-length(AT1_genes))
b2_mu0_t_mu <- transient_mu[!(names(transient_mu) %in% c(AT2_genes))]/4
b2_mu0_t_sd <- rep(0.02,num_genes-length(c(AT2_genes)))
bt <- BayesTraj(iter = 100,n_branch = 2,
Y1 = Y1,
Y2 = Y2,
alpha = 0.1,eplison = 0.04,
lower_k_s = 10,lower_k_t = 4,lower_t0 = 0.3,upper_b1_t0 = 0.8,lower_b2_t0 = 0.3,
lower_mu0_s = 0.2,upper_mu0_s = 0.5,lower_mu0_t = 0.05,upper_mu0_t=0.4,
b1_mu0_s_mu = b1_mu0_s_mu,b1_mu0_s_sd = b1_mu0_s_sd,
b2_mu0_s_mu = b2_mu0_s_mu,b2_mu0_s_sd = b2_mu0_s_sd ,
b1_mu0_t_mu = b1_mu0_t_mu,b1_mu0_t_sd = b1_mu0_t_sd,
b2_mu0_t_mu = b2_mu0_t_mu,b2_mu0_t_sd = b2_mu0_t_sd ,
chains = 1)
library(BayesTraj)
library(pheatmap)
library(ggplot2)
library(RColorBrewer)
theme_set(theme_bw())
set.seed(1L)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE, warning = FALSE,
fig.center = TRUE, fig.width = 6, fig.height = 4)
hesc_exp <- read.csv("data/linear/hesc_exp.csv", header = T, row.names = 1)
hesc_exp[1:3,1:5]
gene_names <- rownames(hesc_exp)
t_hesc_exp <- t(hesc_exp)           # Rows represent cells, and columns represent genes.
marker_genes1 <- c('EOMES','CER1', 'GATA4', 'DKK4','MYCT1','PRDM1')
marker_genes2 <- c('CDX1','MSX2','T')
marker_exp = hesc_exp[c(marker_genes1,marker_genes2),]
bluecolors <- brewer.pal(9,"Blues")
redcolors <- brewer.pal(9,"Reds")
color_palette <- c(colorRampPalette(colors = c(bluecolors[9], bluecolors[7]))(20),
colorRampPalette(colors = c(bluecolors[7], bluecolors[5]))(20),
colorRampPalette(colors = c(bluecolors[5], "white"))(10),
colorRampPalette(colors = c("white", redcolors[5]))(10),
colorRampPalette(colors = c(redcolors[5], redcolors[6]))(20),
colorRampPalette(colors = c(redcolors[6], redcolors[7]))(20))
pheatmap(marker_exp,
scale = "row",
color = color_palette,
cluster_rows = TRUE,
cluster_cols = F,
show_rownames = T,
show_colnames = F
)
norm_marker_exp <- normalized_expression_data(t(marker_exp))
Y1 <- norm_marker_exp[,c(marker_genes1),drop = F]
Y2 <- norm_marker_exp[,c(marker_genes2),drop = F]
num_genes <- length(unique(c(marker_genes1,marker_genes2)))
b1_mu0_s_mu = rep(0.5,length(marker_genes1))
b1_mu0_s_sd = rep(0.2,length(marker_genes1))
b2_mu0_s_mu = rep(0.5,length(c(marker_genes2)))
b2_mu0_s_sd = rep(0.2,length(c(marker_genes2)))
b1_mu0_t_mu <- rep(0.25,num_genes-length(marker_genes1))
b1_mu0_t_sd <- rep(0.2,num_genes-length(marker_genes1))
b2_mu0_t_mu <- rep(0.25,num_genes-length(c(marker_genes2)))
b2_mu0_t_sd <- rep(0.2,num_genes-length(c(marker_genes2)))
b1_k_s_mu <- rep(0,length(marker_genes1))
b1_k_s_sd <- rep(50,length(marker_genes2))
bt <- BayesTraj(iter = 100,n_branch = 1,
Y1 = Y1,
Y2 = Y2,
alpha = 0.1,eplison = 0.04,
lower_k_s = 5,lower_k_t = 1,lower_t0 = 0.1,upper_b1_t0 = 0.8,
lower_b2_t0 = 0.1,
b1_mu0_s_mu = b1_mu0_s_mu,b1_mu0_s_sd = b1_mu0_s_sd,
# b1_k_s_mu = b1_k_s_mu,b1_k_s_sd = b1_k_s_sd,
b2_mu0_s_mu = b2_mu0_s_mu,b2_mu0_s_sd = b2_mu0_s_sd ,
b1_mu0_t_mu = b1_mu0_t_mu,b1_mu0_t_sd = b1_mu0_t_sd,
b2_mu0_t_mu = b2_mu0_t_mu,b2_mu0_t_sd = b2_mu0_t_sd ,
lower_mu0_s = 0.2,upper_mu0_s = 0.5,lower_mu0_t = 0.05,upper_mu0_t=0.4,
chains = 1)
library(BayesTraj)
library(pheatmap)
library(ggplot2)
library(RColorBrewer)
theme_set(theme_bw())
set.seed(1L)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE, warning = FALSE,
fig.center = TRUE, fig.width = 6, fig.height = 4)
hesc_exp <- read.csv("data/linear/hesc_exp.csv", header = T, row.names = 1)
hesc_exp[1:3,1:5]
gene_names <- rownames(hesc_exp)
t_hesc_exp <- t(hesc_exp)           # Rows represent cells, and columns represent genes.
marker_genes1 <- c('EOMES','CER1', 'GATA4', 'DKK4','MYCT1','PRDM1')
marker_genes2 <- c('CDX1','MSX2','T')
marker_exp = hesc_exp[c(marker_genes1,marker_genes2),]
bluecolors <- brewer.pal(9,"Blues")
redcolors <- brewer.pal(9,"Reds")
color_palette <- c(colorRampPalette(colors = c(bluecolors[9], bluecolors[7]))(20),
colorRampPalette(colors = c(bluecolors[7], bluecolors[5]))(20),
colorRampPalette(colors = c(bluecolors[5], "white"))(10),
colorRampPalette(colors = c("white", redcolors[5]))(10),
colorRampPalette(colors = c(redcolors[5], redcolors[6]))(20),
colorRampPalette(colors = c(redcolors[6], redcolors[7]))(20))
pheatmap(marker_exp,
scale = "row",
color = color_palette,
cluster_rows = TRUE,
cluster_cols = F,
show_rownames = T,
show_colnames = F
)
norm_marker_exp <- normalized_expression_data(t(marker_exp))
Y1 <- norm_marker_exp[,c(marker_genes1),drop = F]
Y2 <- norm_marker_exp[,c(marker_genes2),drop = F]
num_genes <- length(unique(c(marker_genes1,marker_genes2)))
b1_mu0_s_mu = rep(0.5,length(marker_genes1))
b1_mu0_s_sd = rep(0.2,length(marker_genes1))
b2_mu0_s_mu = rep(0.5,length(c(marker_genes2)))
b2_mu0_s_sd = rep(0.2,length(c(marker_genes2)))
b1_mu0_t_mu <- rep(0.25,num_genes-length(marker_genes1))
b1_mu0_t_sd <- rep(0.2,num_genes-length(marker_genes1))
b2_mu0_t_mu <- rep(0.25,num_genes-length(c(marker_genes2)))
b2_mu0_t_sd <- rep(0.2,num_genes-length(c(marker_genes2)))
b1_k_s_mu <- rep(0,length(marker_genes1))
b1_k_s_sd <- rep(50,length(marker_genes2))
bt <- BayesTraj(iter = 100,n_branch = 1,
Y1 = Y1,
Y2 = Y2,
alpha = 0.1,eplison = 0.04,
lower_k_s = 5,lower_k_t = 1,lower_t0 = 0.1,upper_b1_t0 = 0.8,
lower_b2_t0 = 0.1,
b1_mu0_s_mu = b1_mu0_s_mu,b1_mu0_s_sd = b1_mu0_s_sd,
# b1_k_s_mu = b1_k_s_mu,b1_k_s_sd = b1_k_s_sd,
b2_mu0_s_mu = b2_mu0_s_mu,b2_mu0_s_sd = b2_mu0_s_sd ,
b1_mu0_t_mu = b1_mu0_t_mu,b1_mu0_t_sd = b1_mu0_t_sd,
b2_mu0_t_mu = b2_mu0_t_mu,b2_mu0_t_sd = b2_mu0_t_sd ,
lower_mu0_s = 0.2,upper_mu0_s = 0.5,lower_mu0_t = 0.05,upper_mu0_t=0.4,
chains = 1)
library(BayesTraj)
library(pheatmap)
library(ggplot2)
library(RColorBrewer)
theme_set(theme_bw())
set.seed(1L)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE, warning = FALSE,
fig.center = TRUE, fig.width = 6, fig.height = 4)
hesc_exp <- read.csv("data/linear/hesc_exp.csv", header = T, row.names = 1)
hesc_exp[1:3,1:5]
gene_names <- rownames(hesc_exp)
t_hesc_exp <- t(hesc_exp)           # Rows represent cells, and columns represent genes.
marker_genes1 <- c('EOMES','CER1', 'GATA4', 'DKK4','MYCT1','PRDM1')
marker_genes2 <- c('CDX1','MSX2','T')
marker_exp = hesc_exp[c(marker_genes1,marker_genes2),]
bluecolors <- brewer.pal(9,"Blues")
redcolors <- brewer.pal(9,"Reds")
color_palette <- c(colorRampPalette(colors = c(bluecolors[9], bluecolors[7]))(20),
colorRampPalette(colors = c(bluecolors[7], bluecolors[5]))(20),
colorRampPalette(colors = c(bluecolors[5], "white"))(10),
colorRampPalette(colors = c("white", redcolors[5]))(10),
colorRampPalette(colors = c(redcolors[5], redcolors[6]))(20),
colorRampPalette(colors = c(redcolors[6], redcolors[7]))(20))
pheatmap(marker_exp,
scale = "row",
color = color_palette,
cluster_rows = TRUE,
cluster_cols = F,
show_rownames = T,
show_colnames = F
)
norm_marker_exp <- normalized_expression_data(t(marker_exp))
Y1 <- norm_marker_exp[,c(marker_genes1),drop = F]
Y2 <- norm_marker_exp[,c(marker_genes2),drop = F]
num_genes <- length(unique(c(marker_genes1,marker_genes2)))
b1_mu0_s_mu = rep(0.5,length(marker_genes1))
b1_mu0_s_sd = rep(0.2,length(marker_genes1))
b2_mu0_s_mu = rep(0.5,length(c(marker_genes2)))
b2_mu0_s_sd = rep(0.2,length(c(marker_genes2)))
b1_mu0_t_mu <- rep(0.25,num_genes-length(marker_genes1))
b1_mu0_t_sd <- rep(0.2,num_genes-length(marker_genes1))
b2_mu0_t_mu <- rep(0.25,num_genes-length(c(marker_genes2)))
b2_mu0_t_sd <- rep(0.2,num_genes-length(c(marker_genes2)))
b1_k_s_mu <- rep(0,length(marker_genes1))
b1_k_s_sd <- rep(50,length(marker_genes2))
bt <- BayesTraj(iter = 100,n_branch = 1,
Y1 = Y1,
Y2 = Y2,
alpha = 0.1,eplison = 0.04,
lower_k_s = 5,lower_k_t = 1,lower_t0 = 0.1,upper_b1_t0 = 0.8,
lower_b2_t0 = 0.1,
b1_mu0_s_mu = b1_mu0_s_mu,b1_mu0_s_sd = b1_mu0_s_sd,
# b1_k_s_mu = b1_k_s_mu,b1_k_s_sd = b1_k_s_sd,
b2_mu0_s_mu = b2_mu0_s_mu,b2_mu0_s_sd = b2_mu0_s_sd ,
b1_mu0_t_mu = b1_mu0_t_mu,b1_mu0_t_sd = b1_mu0_t_sd,
b2_mu0_t_mu = b2_mu0_t_mu,b2_mu0_t_sd = b2_mu0_t_sd ,
lower_mu0_s = 0.2,upper_mu0_s = 0.5,lower_mu0_t = 0.05,upper_mu0_t=0.4,
chains = 1)
library(BayesTraj)
data <- read.csv('data/linear/hesc_exp.csv',header = T,row.names = 1)
gene_names <- rownames(data)
data_counts <- t(data)
AT1_genes <- c('EOMES','CER1', 'GATA4', 'DKK4','MYCT1','PRDM1')
AT2_genes <- c('CDX1','MSX2','T')
AT1_genes %in% gene_names
AT2_genes %in% gene_names
gene_expression_matrix=data_counts[,c(AT1_genes,AT2_genes)]
gene_expression_matrix <- t(gene_expression_matrix)
library(pheatmap)
library(RColorBrewer)
bluecolors <- brewer.pal(9,"Blues")
redcolors <- brewer.pal(9,"Reds")
color_palette <- c(colorRampPalette(colors = c(bluecolors[9], bluecolors[7]))(20),
colorRampPalette(colors = c(bluecolors[7], bluecolors[5]))(20),
colorRampPalette(colors = c(bluecolors[5], "white"))(10),
colorRampPalette(colors = c("white", redcolors[5]))(10),
colorRampPalette(colors = c(redcolors[5], redcolors[6]))(20),
colorRampPalette(colors = c(redcolors[6], redcolors[7]))(20))
pheatmap(gene_expression_matrix,
scale = "row",
color = color_palette,
cluster_rows = TRUE,
cluster_cols = F,
show_rownames = T,
show_colnames = F
)
b1_genes <- AT1_genes
b2_genes <- AT2_genes
b1_genes %in% gene_names
b2_genes %in% gene_names
sub_data_counts <- normalized_expression_data(t(gene_expression_matrix))
Y1 <- sub_data_counts[,c(b1_genes),drop = F]
Y2 <- sub_data_counts[,c(b2_genes),drop = F]
b1_mu0_s_mu = rep(0.5,length(AT1_genes))
b1_mu0_s_sd = rep(0.2,length(AT1_genes))
b2_mu0_s_mu = rep(0.5,length(c(AT2_genes)))
b2_mu0_s_sd = rep(0.2,length(c(AT2_genes)))
num_genes <- length(unique(c(AT1_genes,AT2_genes)))
b1_mu0_t_mu <- rep(0.25,num_genes-length(AT1_genes))
b1_mu0_t_sd <- rep(0.2,num_genes-length(AT1_genes))
b2_mu0_t_mu <- rep(0.25,num_genes-length(c(AT2_genes)))
b2_mu0_t_sd <- rep(0.2,num_genes-length(c(AT2_genes)))
b1_k_s_mu <- rep(0,length(AT1_genes))
b1_k_s_sd <- rep(50,length(AT1_genes))
bt <- BayesTraj(iter = 100,n_branch = 1,
Y1 = Y1,
Y2 = Y2,
alpha = 0.1,eplison = 0.04,
lower_k_s = 5,lower_k_t = 1,lower_t0 = 0.1,upper_b1_t0 = 0.8,lower_b2_t0 = 0.1,
b1_mu0_s_mu = b1_mu0_s_mu,b1_mu0_s_sd = b1_mu0_s_sd,
# b1_k_s_mu = b1_k_s_mu,b1_k_s_sd = b1_k_s_sd,
b2_mu0_s_mu = b2_mu0_s_mu,b2_mu0_s_sd = b2_mu0_s_sd ,
b1_mu0_t_mu = b1_mu0_t_mu,b1_mu0_t_sd = b1_mu0_t_sd,b2_mu0_t_mu = b2_mu0_t_mu,b2_mu0_t_sd = b2_mu0_t_sd ,
lower_mu0_s = 0.2,upper_mu0_s = 0.5,lower_mu0_t = 0.05,upper_mu0_t=0.4,
chains = 1)
num_genes <- length(unique(c(marker_genes1,marker_genes2)))
b1_mu0_s_mu = rep(0.5,length(marker_genes1))
b1_mu0_s_sd = rep(0.2,length(marker_genes1))
b2_mu0_s_mu = rep(0.5,length(c(marker_genes2)))
b2_mu0_s_sd = rep(0.2,length(c(marker_genes2)))
b1_mu0_t_mu <- rep(0.25,num_genes-length(marker_genes1))
b1_mu0_t_sd <- rep(0.2,num_genes-length(marker_genes1))
b2_mu0_t_mu <- rep(0.25,num_genes-length(c(marker_genes2)))
b2_mu0_t_sd <- rep(0.2,num_genes-length(c(marker_genes2)))
b1_k_s_mu <- rep(0,length(marker_genes1))
b1_k_s_sd <- rep(50,length(marker_genes2))
bt <- BayesTraj(iter = 100,n_branch = 1,
Y1 = Y1,
Y2 = Y2,
alpha = 0.1,eplison = 0.04,
lower_k_s = 5,lower_k_t = 1,lower_t0 = 0.1,upper_b1_t0 = 0.8,
lower_b2_t0 = 0.1,
b1_mu0_s_mu = b1_mu0_s_mu,b1_mu0_s_sd = b1_mu0_s_sd,
# b1_k_s_mu = b1_k_s_mu,b1_k_s_sd = b1_k_s_sd,
b2_mu0_s_mu = b2_mu0_s_mu,b2_mu0_s_sd = b2_mu0_s_sd ,
b1_mu0_t_mu = b1_mu0_t_mu,b1_mu0_t_sd = b1_mu0_t_sd,
b2_mu0_t_mu = b2_mu0_t_mu,b2_mu0_t_sd = b2_mu0_t_sd ,
lower_mu0_s = 0.2,upper_mu0_s = 0.5,lower_mu0_t = 0.05,upper_mu0_t=0.4,
chains = 1)
remove.packages("BayesTraj")
install.packages("C:/Users/ling/Desktop/BayesTraj", repos = NULL, type = "source")
